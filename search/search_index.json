{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 Here we describe the different steps when developing a Python plugin for ImJoy. The scope of this tutorial is not to provide a complete guide for software engineering, but to illustrate some of the important concepts to consider when developing an ImJoy plugin from scratch. We will also cross-reference important section of the ImJoy documentation and other resources, for further reading. Throughout this tutorial, we will provide relevant code fragments , but also link the complete files for further inspection. We will implement a ImJoy plugin that uses the Python plugin engine to perform some calculations (a sine function with a user defined number of data-points). The results will then we plotted in the ImJoy interface. The code is hosted on GitHub, the plugin is explained in a dedicated documentation, and the plugin code will be distributed with a dedicated ImJoy link. This allows easy installation for the end user. Disclaimer 1 : a number of different tools exist for the different steps presented here. We focus on tools that are widely used and easily accessible. Disclaimer 2 : the implemented computational task is intentionally kept very simply to allow focusing on the actual workflow and the different elements.","title":"Overview"},{"location":"#overview","text":"Here we describe the different steps when developing a Python plugin for ImJoy. The scope of this tutorial is not to provide a complete guide for software engineering, but to illustrate some of the important concepts to consider when developing an ImJoy plugin from scratch. We will also cross-reference important section of the ImJoy documentation and other resources, for further reading. Throughout this tutorial, we will provide relevant code fragments , but also link the complete files for further inspection. We will implement a ImJoy plugin that uses the Python plugin engine to perform some calculations (a sine function with a user defined number of data-points). The results will then we plotted in the ImJoy interface. The code is hosted on GitHub, the plugin is explained in a dedicated documentation, and the plugin code will be distributed with a dedicated ImJoy link. This allows easy installation for the end user. Disclaimer 1 : a number of different tools exist for the different steps presented here. We focus on tools that are widely used and easily accessible. Disclaimer 2 : the implemented computational task is intentionally kept very simply to allow focusing on the actual workflow and the different elements.","title":"Overview"},{"location":"code-organization/","text":"Code organization \u00b6 To get started, we created the project folder called ImJoy-demo-project Below we show how this folder was populated during the development described in this tutorial. It contains files and folders for GitHub, the documentation, and the actual Python and ImJoy code. This might look daunting at the beginning, but we will explain in detail all steps that eventually results in this organisation. . \u251c\u2500 dev/ # Folder containing code for development \u2502 \u251c\u2500 dev-calc-sine..ipynb # Jupyter notebook \u2502 \u251c\u2500 docs/ # Folder containing documentation \u2502 \u251c\u2500 blabla.md # smFISH image (channel 1) \u2502 \u251c\u2500 assets/ # Folder containing images of docs \u2502 \u2502 \u251c\u2500 screenshot.png # Screenshot of plugin \u2502 \u251c\u2500 imjoy-plugins/ # Folder containing ImJoy plugins \u2502 \u251c\u2500 plugin1.imjoy.html # ImJoy plugin 1 \u2502 \u251c\u2500 plugin2.imjoy.html # ImJoy plugin 2 \u2502 \u251c\u2500 site/ # Folder web-site of documentation (auto created) \u2502 \u251c\u2500 ... \u2502 \u251c\u2500 .gitignore # File specifying files and folders that are ignored by git \u251c\u2500 LICENCE # Licence file \u251c\u2500 mkdocs.yaml # File defining how documentation is created \u251c\u2500 ReadMe.md # ReadMe file rendered on GitHub \u251c\u2500 setup.py # File containing .... .","title":"1. Code organization"},{"location":"code-organization/#code-organization","text":"To get started, we created the project folder called ImJoy-demo-project Below we show how this folder was populated during the development described in this tutorial. It contains files and folders for GitHub, the documentation, and the actual Python and ImJoy code. This might look daunting at the beginning, but we will explain in detail all steps that eventually results in this organisation. . \u251c\u2500 dev/ # Folder containing code for development \u2502 \u251c\u2500 dev-calc-sine..ipynb # Jupyter notebook \u2502 \u251c\u2500 docs/ # Folder containing documentation \u2502 \u251c\u2500 blabla.md # smFISH image (channel 1) \u2502 \u251c\u2500 assets/ # Folder containing images of docs \u2502 \u2502 \u251c\u2500 screenshot.png # Screenshot of plugin \u2502 \u251c\u2500 imjoy-plugins/ # Folder containing ImJoy plugins \u2502 \u251c\u2500 plugin1.imjoy.html # ImJoy plugin 1 \u2502 \u251c\u2500 plugin2.imjoy.html # ImJoy plugin 2 \u2502 \u251c\u2500 site/ # Folder web-site of documentation (auto created) \u2502 \u251c\u2500 ... \u2502 \u251c\u2500 .gitignore # File specifying files and folders that are ignored by git \u251c\u2500 LICENCE # Licence file \u251c\u2500 mkdocs.yaml # File defining how documentation is created \u251c\u2500 ReadMe.md # ReadMe file rendered on GitHub \u251c\u2500 setup.py # File containing .... .","title":"Code organization"},{"location":"deployment/","text":"Deployment and stable release \u00b6 The last step is the deployment and creating a stable release. Here we explain how you can package your module in a way that ImJoy can install it as a requirment via the pip command Create a pip package \u00b6 In order to create a package that can be installed via the pip command, you have to specify a setup.py file. This is a simple python file in the root folder that specifies our package. from setuptools import setup , find_packages requirements = [ 'numpy' ] setup ( name = 'pkgcode' , version = '0.1.0' , description = 'What is going on.' , url = 'http://whatever' , author = 'Florian MUELLER' , author_email = 'muellerf.research@gmail.com' , license = 'MIT' , packages = find_packages (), include_package_data = True , install_requires = requirements , zip_safe = False ) The important fields to adjust for your own package are requirements : contains all requirements of your package name : this has to be the name of the folder actually containing your modules. This is not necessarily the name of your package. version : version of your package. You can specify what you want, usually semantic versioning is recommended. [TODO: add link] description , url , author , author_email : self-explanatory fields. licence : licence type of your repository. If you are not sure which license you should use , check out choosealicense.com . [TODO: add link for more infos] [TODO: how to test this?] Once your package works, you can push it to GitHub. Specify pip package \u00b6 Now you can specify this package as a requirement in your plugin. ImJoy will the automatically download this package. We specify this in the requirements of the plugin. [TODO add string] One very important aspect is the tag specified here @ . This allows to install the specified version, giving you precise control about what is installed. In the actual plugin, we now have to consider this stable version by adding `` ` python if 'dev-local' in api . TAG : import importlib sys . path . insert ( 0 , 'PathToModule' ) import rnaloc importlib . reload ( rnaloc ) else : import rnaloc More information can be found here.","title":"6. Deployment"},{"location":"deployment/#deployment-and-stable-release","text":"The last step is the deployment and creating a stable release. Here we explain how you can package your module in a way that ImJoy can install it as a requirment via the pip command","title":"Deployment and stable release"},{"location":"deployment/#create-a-pip-package","text":"In order to create a package that can be installed via the pip command, you have to specify a setup.py file. This is a simple python file in the root folder that specifies our package. from setuptools import setup , find_packages requirements = [ 'numpy' ] setup ( name = 'pkgcode' , version = '0.1.0' , description = 'What is going on.' , url = 'http://whatever' , author = 'Florian MUELLER' , author_email = 'muellerf.research@gmail.com' , license = 'MIT' , packages = find_packages (), include_package_data = True , install_requires = requirements , zip_safe = False ) The important fields to adjust for your own package are requirements : contains all requirements of your package name : this has to be the name of the folder actually containing your modules. This is not necessarily the name of your package. version : version of your package. You can specify what you want, usually semantic versioning is recommended. [TODO: add link] description , url , author , author_email : self-explanatory fields. licence : licence type of your repository. If you are not sure which license you should use , check out choosealicense.com . [TODO: add link for more infos] [TODO: how to test this?] Once your package works, you can push it to GitHub.","title":"Create a pip package"},{"location":"deployment/#specify-pip-package","text":"Now you can specify this package as a requirement in your plugin. ImJoy will the automatically download this package. We specify this in the requirements of the plugin. [TODO add string] One very important aspect is the tag specified here @ . This allows to install the specified version, giving you precise control about what is installed. In the actual plugin, we now have to consider this stable version by adding `` ` python if 'dev-local' in api . TAG : import importlib sys . path . insert ( 0 , 'PathToModule' ) import rnaloc importlib . reload ( rnaloc ) else : import rnaloc More information can be found here.","title":"Specify pip package"},{"location":"distribution/","text":"Distribution \u00b6 The recommended way to distribute ImJoy plugins is with a specific url here you can either use directly the plugin url. or you can add a manifest file, that allows ImJoy to treat your repository as a plugin repository. The advantage is that you can use a shorter syntax. and you can specify plugin dependencies \"dependencies\" : [ \"oeway/ImJoy-Plugins:Im2Im-Dashboard\" ]","title":"7. Distribution"},{"location":"distribution/#distribution","text":"The recommended way to distribute ImJoy plugins is with a specific url here you can either use directly the plugin url. or you can add a manifest file, that allows ImJoy to treat your repository as a plugin repository. The advantage is that you can use a shorter syntax. and you can specify plugin dependencies \"dependencies\" : [ \"oeway/ImJoy-Plugins:Im2Im-Dashboard\" ]","title":"Distribution"},{"location":"documentation/","text":"Documentation \u00b6 User manual are invaluable for the user to be able to correctly use the code. A widely used format to write such documentations is Markdown, which is plain text language that allows formatting. As an example, see the Markdown file of this page . For a introduction to Markdown see here . Documentation can be as simple as a ReadMe.md in the root directory that will be rendered on the GitHub repository page. You can also create more advanced documentations . Many excellent tools exist that automatically create documentation froma set of markdown files. An easy tool to get started is MkDocs . For instance, we created this documentation with MkDocs. Installing MkDocs \u00b6 If you already have Anaconda, it is easy to get started. First, you have to install MkDocs. Open an Anaconda terminal and type pip install mkdocs We used a special theme Material for mkdocs , which can be installed with: pip install mkdocs-material This package allows to integrate a number of extensions, for advanced formatting of the documentation, for more information see here . Writing a documentation \u00b6 To initialize the documentation, go to folder containing the project folder ( ImJoy-demo-project in our case). Open an Anaconda terminal and run mkdocs new ImJoy-demo-project This will then create two files: Configuration file: ImJoy-demo-project\\mkdocs.yml Initialize the docs: ImJoy-demo-project\\docs\\index.md With these two files, a first version of the documentation can already be generated. MkDocs provides a developmental server that you can use to check on your computer how the documentation web site will look like. For this, open an Anaconda terminal in your project folder and run mkdocs serve The website will then be available at http://127.0.0.1:8000 . The mkdocs.yml file determines how your documentation is organized and looks like. We invite you to consult the excellent documentations of MkDocs and [Material for mkdocs](https://squidfunk.github.io/mkdocs-material/ for more details. Deploying your documentation \u00b6 Once the documentation is finished, you can build the website with mkdocs build This will build the static website containing the documentation, which is stored in the newly created subfolder site . You can then automatically deploy this site to GitHub pages. mkdocs gh-deploy --clean --force This will create a separate branch gh-pages on your GitHub repository dedicated to the documentation. GitHub will then automatically build the website with the documentation for you. To obtain the URL, go the Settings and GitHub Pages . The URL for this website is https://muellerflorian.github.io/ImJoy-demo-project/ Please note that each time you update the documentation , you have to perform these steps to build and deploy your documentation.","title":"3. Documentation"},{"location":"documentation/#documentation","text":"User manual are invaluable for the user to be able to correctly use the code. A widely used format to write such documentations is Markdown, which is plain text language that allows formatting. As an example, see the Markdown file of this page . For a introduction to Markdown see here . Documentation can be as simple as a ReadMe.md in the root directory that will be rendered on the GitHub repository page. You can also create more advanced documentations . Many excellent tools exist that automatically create documentation froma set of markdown files. An easy tool to get started is MkDocs . For instance, we created this documentation with MkDocs.","title":"Documentation"},{"location":"documentation/#installing-mkdocs","text":"If you already have Anaconda, it is easy to get started. First, you have to install MkDocs. Open an Anaconda terminal and type pip install mkdocs We used a special theme Material for mkdocs , which can be installed with: pip install mkdocs-material This package allows to integrate a number of extensions, for advanced formatting of the documentation, for more information see here .","title":"Installing MkDocs"},{"location":"documentation/#writing-a-documentation","text":"To initialize the documentation, go to folder containing the project folder ( ImJoy-demo-project in our case). Open an Anaconda terminal and run mkdocs new ImJoy-demo-project This will then create two files: Configuration file: ImJoy-demo-project\\mkdocs.yml Initialize the docs: ImJoy-demo-project\\docs\\index.md With these two files, a first version of the documentation can already be generated. MkDocs provides a developmental server that you can use to check on your computer how the documentation web site will look like. For this, open an Anaconda terminal in your project folder and run mkdocs serve The website will then be available at http://127.0.0.1:8000 . The mkdocs.yml file determines how your documentation is organized and looks like. We invite you to consult the excellent documentations of MkDocs and [Material for mkdocs](https://squidfunk.github.io/mkdocs-material/ for more details.","title":"Writing a documentation"},{"location":"documentation/#deploying-your-documentation","text":"Once the documentation is finished, you can build the website with mkdocs build This will build the static website containing the documentation, which is stored in the newly created subfolder site . You can then automatically deploy this site to GitHub pages. mkdocs gh-deploy --clean --force This will create a separate branch gh-pages on your GitHub repository dedicated to the documentation. GitHub will then automatically build the website with the documentation for you. To obtain the URL, go the Settings and GitHub Pages . The URL for this website is https://muellerflorian.github.io/ImJoy-demo-project/ Please note that each time you update the documentation , you have to perform these steps to build and deploy your documentation.","title":"Deploying your documentation"},{"location":"github/","text":"Deployment on GitHub \u00b6 It is good practice to deploy your code on GitHub. This provides backup and version control. GitHub repositories can be either publish or private. So even closed developments are possible. If you don't have an account, create one and follow the provided instructions for how to create a repository. Several excellent resources exist explaining how to use GitHub. Below is a screen shot of this repository: Visit GitHub repository here >>","title":"2. GitHub"},{"location":"github/#deployment-on-github","text":"It is good practice to deploy your code on GitHub. This provides backup and version control. GitHub repositories can be either publish or private. So even closed developments are possible. If you don't have an account, create one and follow the provided instructions for how to create a repository. Several excellent resources exist explaining how to use GitHub. Below is a screen shot of this repository: Visit GitHub repository here >>","title":"Deployment on GitHub"},{"location":"imjoy-development/","text":"ImJoy plugin development \u00b6 To launch ImJoy, simply open a browser and open https://imjoy.io . You can then either check of some of the ImJoy plugins, or start working on your plugin. Native Python plugin \u00b6 You can add a plugin template with the + PLUGINS button. For this simple tutorial, we create a native python plugin. However, this plugin type requires the plugin engine. Yo can find a dedicate section in the ImJoy user manual for how to install the engine with this link . Once you have the engine running and connected to ImJoy, you can save and execute your plugins. The first step is to fill out some fields of the <config> block. To get started, we name the plugin Sine Calculator (field name ) and give a short description ( description ). We can then save the plugin from its toolbar. Once save the plugin will show up with its name in the plugin interface, and have a little rocket \ud83d\ude80 next to its name. This indicates that the plugin is powered by the plugin engine. Pressing on its name will run it, for the template plugin it will simply show Hello world in the plugin engine. Tag facilitate development \u00b6 A very useful features are tags to change how a plugin is executed. Here we use tags to differentiate between a development and stable release version. For this, we add the following definition to the block where we have three different tags: \"tags\" : [ \"stable\" , \"dev-local\" , \"dev-github\" ] When you save your plugin, these tags will show up in the bar of the code editor. For the next steps, select dev-local . More information on tags can be found here Using own module \u00b6 During development, we will use our locally stored module. This can be done in the <script> block. Here we have to add the absolute path of the module PathToModule to the Python system path. Please note the importlib.reload allows to reload the library if you have changes. < script lang = \"python\" > if 'dev-local' in api . TAG : import importlib import sys sys . path . insert ( 0 , 'PathToModule' ) import outils importlib . reload ( outils ) </ script > We can then use this module in our Python code. import asyncio class ImJoyPlugin (): # Run upon plugin execution async def run ( self , my ): x , y = outils . calc_sine ( 10 ) print ( f 'x values: {x}' ) print ( f 'y values: {y}' ) When running the plugin, the calculated vectors will be shown in the Python plugin engine. Note 1 : that the engine does not support any graphics. We will show you how to plot the data further down. Note 2 : import asyncio and async def are used to permit asynchronous function calls. For more details see here . Create plugin user interface \u00b6 For our example, the user has to specify how many data-points should be calculated. The easiest way to obtain user input is by using the plugin user interface. This can be done with the ui string the the <config block. \"ui\" : [ \"# of data points : {id:'n_points', type: 'number', min: 0, placeholder:20}\" ] After saving the plugin, it has now a little menu that you can show by pressing on the arrow down symbol next to its name. Each parameter that you specify in such an interface, can be retrieved by its unique id from the object my , e.g. my.config.n_points for our example. To now perform the calculations with the user specified number of points, simply use x , y = outils . calc_sine ( my . config . n_points ) Further information For more infos on the ui string, see here . For more advanced interfaces, you can use a window plugin that allows you to design an interface with HTML. We more information we refer to a dedicated dem here . Showing results in ImJoy \u00b6 This plugin is executed in the plugin engine, where we used print to show some results. However, we would like to show plots and more detailed feedback directly in the ImJoy app. For this, ImJoy provides a number of dedicated API functions . ImJoy log \u00b6 For example, we could replace the print statements with the api function api.log . api . log ( f 'y values: {y}' ) api . log ( f 'y values: {y}' ) This then shows the results in the plugin specific log, which can be opened by clicking on the grey inverted exclamation mark next to the plugin name. Note that this log can be cleared and exported. Plot results \u00b6 The undoubtedly best way to show these data is with a plot. In order to do this, we require a second plugin, this time a window plugin, which will display data it receives. We use HTML to determine how the plugin looks like, and JavaScript how the window plugin show process received data. An excellent introduction to HTML, JavaScript with hands-on example is w3schools.com/ . We create a template window plugin, and name it Charts JS . You can find the full here >> , and we will reference specific sections throughout the explanations here. This plugin is only useful when called from another plugin, which can be specified in the <config> block. Such a \"helper\" plugin will show up in the plugin window, but it will be greyed out and can't be run by clicking on its name. \"runnable\" : false See here >> Many JavaScript libraries permit interactive plotting of data. Here, we used Plotly.js , a very rich library for interactive data visualisation. To use this library, you have to specify it in the requirements \"requirements\" : [ \"https://cdn.plot.ly/plotly-latest.min.js\" ] See here >> Ploty show its plots in so called HTML division <div>. We can add such a division to the block of the plugin, and give it the id chart`. < window lang = \"html\" > < div > < div id = \"chart\" ></ div > </ div > </ window > See here >> Then we have to tell the plugin how to display data it received . If an ImJoy plugin is called by another plugin, it can receive data in the my.data object in its run function. In this run function, we the simply create the variables that are needed by Plotly to show data. We determine: 1. Where we should plot: the <div> element named chart 0. What and how we should plot: the x , and y data, the plot type and the marker size. In the actual Plotly call we // Call plotly var myPlot = document . getElementById ( 'chart' ), data = [ { x : my . data . x , y : my . data . y , type : 'scatter' , mode : 'lines+markers' , marker : { size : 5 } } ], layout = { }; Plotly . newPlot ( 'chart' , data , layout ,{ responsive : true }); See here >> The last step is then you call this new plugin from within our native Python plugin. This can be done with the api function api.createWindow . We create first a dictionary containing the data we would like to send to the window plugin. This contains also other required fields name : is the title of the window that will be created type : this is the name of the window plugin, we would like to call, e.g. Charts JS in our example w , h : window width, and height data : containing the actual x and y values. Please note that numpy arrays are not supported and have to be converted to lists. data_plot = { 'name' : 'Plot charts - with JavaScript' , 'type' : 'Charts JS' , 'w' : 12 , 'h' : 10 , 'data' :{ 'x' : x . tolist (), 'y' : y . tolist () } } await api . createWindow ( data_plot ) See here >> When you now run the plugin, it will show a window with the calculated curve. Further information For more infos on api.createWindow string, see here . For a more detailed information about how to plot data in JavaScript and how to refresh the window we refer this demo . Exporting the plugin \u00b6 You can then download the plugin code from the editor. This will download a file name with the name of the plugin, followed by a unique string, and the extension .imjoy.html . We saved the two plugins it without the unique string in the folder imjoy-plugin Sine Calculator.imjoy.html : to perform calculations. Charts JS.imjoy.html : to display the data. See here >>","title":"5. ImJoy development"},{"location":"imjoy-development/#imjoy-plugin-development","text":"To launch ImJoy, simply open a browser and open https://imjoy.io . You can then either check of some of the ImJoy plugins, or start working on your plugin.","title":"ImJoy plugin development"},{"location":"imjoy-development/#native-python-plugin","text":"You can add a plugin template with the + PLUGINS button. For this simple tutorial, we create a native python plugin. However, this plugin type requires the plugin engine. Yo can find a dedicate section in the ImJoy user manual for how to install the engine with this link . Once you have the engine running and connected to ImJoy, you can save and execute your plugins. The first step is to fill out some fields of the <config> block. To get started, we name the plugin Sine Calculator (field name ) and give a short description ( description ). We can then save the plugin from its toolbar. Once save the plugin will show up with its name in the plugin interface, and have a little rocket \ud83d\ude80 next to its name. This indicates that the plugin is powered by the plugin engine. Pressing on its name will run it, for the template plugin it will simply show Hello world in the plugin engine.","title":"Native Python plugin"},{"location":"imjoy-development/#tag-facilitate-development","text":"A very useful features are tags to change how a plugin is executed. Here we use tags to differentiate between a development and stable release version. For this, we add the following definition to the block where we have three different tags: \"tags\" : [ \"stable\" , \"dev-local\" , \"dev-github\" ] When you save your plugin, these tags will show up in the bar of the code editor. For the next steps, select dev-local . More information on tags can be found here","title":"Tag facilitate development"},{"location":"imjoy-development/#using-own-module","text":"During development, we will use our locally stored module. This can be done in the <script> block. Here we have to add the absolute path of the module PathToModule to the Python system path. Please note the importlib.reload allows to reload the library if you have changes. < script lang = \"python\" > if 'dev-local' in api . TAG : import importlib import sys sys . path . insert ( 0 , 'PathToModule' ) import outils importlib . reload ( outils ) </ script > We can then use this module in our Python code. import asyncio class ImJoyPlugin (): # Run upon plugin execution async def run ( self , my ): x , y = outils . calc_sine ( 10 ) print ( f 'x values: {x}' ) print ( f 'y values: {y}' ) When running the plugin, the calculated vectors will be shown in the Python plugin engine. Note 1 : that the engine does not support any graphics. We will show you how to plot the data further down. Note 2 : import asyncio and async def are used to permit asynchronous function calls. For more details see here .","title":"Using own module"},{"location":"imjoy-development/#create-plugin-user-interface","text":"For our example, the user has to specify how many data-points should be calculated. The easiest way to obtain user input is by using the plugin user interface. This can be done with the ui string the the <config block. \"ui\" : [ \"# of data points : {id:'n_points', type: 'number', min: 0, placeholder:20}\" ] After saving the plugin, it has now a little menu that you can show by pressing on the arrow down symbol next to its name. Each parameter that you specify in such an interface, can be retrieved by its unique id from the object my , e.g. my.config.n_points for our example. To now perform the calculations with the user specified number of points, simply use x , y = outils . calc_sine ( my . config . n_points ) Further information For more infos on the ui string, see here . For more advanced interfaces, you can use a window plugin that allows you to design an interface with HTML. We more information we refer to a dedicated dem here .","title":"Create plugin user interface"},{"location":"imjoy-development/#showing-results-in-imjoy","text":"This plugin is executed in the plugin engine, where we used print to show some results. However, we would like to show plots and more detailed feedback directly in the ImJoy app. For this, ImJoy provides a number of dedicated API functions .","title":"Showing results in ImJoy"},{"location":"imjoy-development/#imjoy-log","text":"For example, we could replace the print statements with the api function api.log . api . log ( f 'y values: {y}' ) api . log ( f 'y values: {y}' ) This then shows the results in the plugin specific log, which can be opened by clicking on the grey inverted exclamation mark next to the plugin name. Note that this log can be cleared and exported.","title":"ImJoy log"},{"location":"imjoy-development/#plot-results","text":"The undoubtedly best way to show these data is with a plot. In order to do this, we require a second plugin, this time a window plugin, which will display data it receives. We use HTML to determine how the plugin looks like, and JavaScript how the window plugin show process received data. An excellent introduction to HTML, JavaScript with hands-on example is w3schools.com/ . We create a template window plugin, and name it Charts JS . You can find the full here >> , and we will reference specific sections throughout the explanations here. This plugin is only useful when called from another plugin, which can be specified in the <config> block. Such a \"helper\" plugin will show up in the plugin window, but it will be greyed out and can't be run by clicking on its name. \"runnable\" : false See here >> Many JavaScript libraries permit interactive plotting of data. Here, we used Plotly.js , a very rich library for interactive data visualisation. To use this library, you have to specify it in the requirements \"requirements\" : [ \"https://cdn.plot.ly/plotly-latest.min.js\" ] See here >> Ploty show its plots in so called HTML division <div>. We can add such a division to the block of the plugin, and give it the id chart`. < window lang = \"html\" > < div > < div id = \"chart\" ></ div > </ div > </ window > See here >> Then we have to tell the plugin how to display data it received . If an ImJoy plugin is called by another plugin, it can receive data in the my.data object in its run function. In this run function, we the simply create the variables that are needed by Plotly to show data. We determine: 1. Where we should plot: the <div> element named chart 0. What and how we should plot: the x , and y data, the plot type and the marker size. In the actual Plotly call we // Call plotly var myPlot = document . getElementById ( 'chart' ), data = [ { x : my . data . x , y : my . data . y , type : 'scatter' , mode : 'lines+markers' , marker : { size : 5 } } ], layout = { }; Plotly . newPlot ( 'chart' , data , layout ,{ responsive : true }); See here >> The last step is then you call this new plugin from within our native Python plugin. This can be done with the api function api.createWindow . We create first a dictionary containing the data we would like to send to the window plugin. This contains also other required fields name : is the title of the window that will be created type : this is the name of the window plugin, we would like to call, e.g. Charts JS in our example w , h : window width, and height data : containing the actual x and y values. Please note that numpy arrays are not supported and have to be converted to lists. data_plot = { 'name' : 'Plot charts - with JavaScript' , 'type' : 'Charts JS' , 'w' : 12 , 'h' : 10 , 'data' :{ 'x' : x . tolist (), 'y' : y . tolist () } } await api . createWindow ( data_plot ) See here >> When you now run the plugin, it will show a window with the calculated curve. Further information For more infos on api.createWindow string, see here . For a more detailed information about how to plot data in JavaScript and how to refresh the window we refer this demo .","title":"Plot results"},{"location":"imjoy-development/#exporting-the-plugin","text":"You can then download the plugin code from the editor. This will download a file name with the name of the plugin, followed by a unique string, and the extension .imjoy.html . We saved the two plugins it without the unique string in the folder imjoy-plugin Sine Calculator.imjoy.html : to perform calculations. Charts JS.imjoy.html : to display the data. See here >>","title":"Exporting the plugin"},{"location":"python-development/","text":"Python code development \u00b6 Here we only provide a brief overview of how Python code could be developed. We use these explanation to establish the necessary terminology for the following steps in this tutorial. Many dedicated resources exist on the web for each of these aspects, and we invite the reader to consult these for more detailed information. Development environment \u00b6 The actual Python code performing the calculation can be implemented, tested, and continued to be used outside of ImJoy. A simple way to get started in Python is using Anaconda . This open source distribution comes with many Python packages pre-installed. Further it already contains the development environments Spyder and Jupyter Notebook . Here, we use Anaconda (Python 3.6) and Jupyter Notebook . In such a notebook, you can implement and test your Python code. To store these notebooks, we create a subfolder dev in the project folder ImJoy-demo-project . The notebook dev-calc-sine.ipynb contains the developed code. Full file is here >> Package code as Python module \u00b6 Once your code is working, you can package it as a module. Python modules are .py files that consist of Python code. They can contain definitions of functions, classes, and variables that can then be used in other Python programs. Wrap code in functions \u00b6 One thing to keep in mind, is that typically the input of these functions is generated in your actual ImJoy plugin. For instance, we will ask the user to specify the number of data-points that should be calculated. Make module \u00b6 We will wrap the above code in a function as shown below. This function is then saved in a .py file ( outils.py in the subfolder pkgcode ). outils.py # Define a function def calc_sine ( n_points = 10 ): x = np . around ( np . arange ( 0.0 , 5.0 , 5.0 / n_points ), decimals = 2 ) y = np . sin ( 2 * np . pi * x ) return x , y It is good practice to comment your code, e.g. following the guidelines of Google . In order to be able to import this module, we have to update the Python sys path . Assuming the we open the Jupyter notebook, we can do this with a relative path, but an absolute path will work as well. dev-calc-sine.ipynb # Update system path import sys sys . path . insert ( 0 , '../pkgcode' ) # Import outils module import outils # Call function outils . calc_sine ( 50 )","title":"4. Python development"},{"location":"python-development/#python-code-development","text":"Here we only provide a brief overview of how Python code could be developed. We use these explanation to establish the necessary terminology for the following steps in this tutorial. Many dedicated resources exist on the web for each of these aspects, and we invite the reader to consult these for more detailed information.","title":"Python code development"},{"location":"python-development/#development-environment","text":"The actual Python code performing the calculation can be implemented, tested, and continued to be used outside of ImJoy. A simple way to get started in Python is using Anaconda . This open source distribution comes with many Python packages pre-installed. Further it already contains the development environments Spyder and Jupyter Notebook . Here, we use Anaconda (Python 3.6) and Jupyter Notebook . In such a notebook, you can implement and test your Python code. To store these notebooks, we create a subfolder dev in the project folder ImJoy-demo-project . The notebook dev-calc-sine.ipynb contains the developed code. Full file is here >>","title":"Development environment"},{"location":"python-development/#package-code-as-python-module","text":"Once your code is working, you can package it as a module. Python modules are .py files that consist of Python code. They can contain definitions of functions, classes, and variables that can then be used in other Python programs.","title":"Package code as Python module"},{"location":"python-development/#wrap-code-in-functions","text":"One thing to keep in mind, is that typically the input of these functions is generated in your actual ImJoy plugin. For instance, we will ask the user to specify the number of data-points that should be calculated.","title":"Wrap code in functions"},{"location":"python-development/#make-module","text":"We will wrap the above code in a function as shown below. This function is then saved in a .py file ( outils.py in the subfolder pkgcode ). outils.py # Define a function def calc_sine ( n_points = 10 ): x = np . around ( np . arange ( 0.0 , 5.0 , 5.0 / n_points ), decimals = 2 ) y = np . sin ( 2 * np . pi * x ) return x , y It is good practice to comment your code, e.g. following the guidelines of Google . In order to be able to import this module, we have to update the Python sys path . Assuming the we open the Jupyter notebook, we can do this with a relative path, but an absolute path will work as well. dev-calc-sine.ipynb # Update system path import sys sys . path . insert ( 0 , '../pkgcode' ) # Import outils module import outils # Call function outils . calc_sine ( 50 )","title":"Make module"}]}