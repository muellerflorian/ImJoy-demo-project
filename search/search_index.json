{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Here we describe the different steps when developing a Python plugin for ImJoy. The scope of this tutorial is not to provide a complete guide for software engineering, but to illustrate some of the important concepts to consider when developing an ImJoy plugin from scratch. We will implement a ImJoy plugin that uses the Python plugin engine to perform some calculations (a sine function with a user defined number of data-points). The results will then we plotted in the ImJoy interface. The code is hosted on GitHub, the plugin is explained in a dedicated documentation, and the plugin code will be distributed with a dedicated ImJoy link. This allows easy installation for the end user. Throughout this tutorial, we will provide relevant code fragments , but also link the complete files for further inspection. Disclaimer 1 : a number of different tools exist for the different steps presented here. We focus on tools that are widely used and easily accessible. Disclaimer 2 : the implemented computational task is intentionally kept very simply to allow focusing on the actual workflow and the different elements.","title":"Overview"},{"location":"#overview","text":"Here we describe the different steps when developing a Python plugin for ImJoy. The scope of this tutorial is not to provide a complete guide for software engineering, but to illustrate some of the important concepts to consider when developing an ImJoy plugin from scratch. We will implement a ImJoy plugin that uses the Python plugin engine to perform some calculations (a sine function with a user defined number of data-points). The results will then we plotted in the ImJoy interface. The code is hosted on GitHub, the plugin is explained in a dedicated documentation, and the plugin code will be distributed with a dedicated ImJoy link. This allows easy installation for the end user. Throughout this tutorial, we will provide relevant code fragments , but also link the complete files for further inspection. Disclaimer 1 : a number of different tools exist for the different steps presented here. We focus on tools that are widely used and easily accessible. Disclaimer 2 : the implemented computational task is intentionally kept very simply to allow focusing on the actual workflow and the different elements.","title":"Overview"},{"location":"code-organization/","text":"Code organization To get started, we created the project folder called ImJoy-demo-project Below we show how this folder was populated during the development described in this tutorial. It contains files and folders for GitHub, the documentation, and the actual Python and ImJoy code. This might look daunting at the beginning, but we will explain in detail all steps that eventually results in this organization. . \u251c\u2500 dev/ # Folder containing code for development \u2502 \u251c\u2500 dev-calc-sine..ipynb # Jupyter notebook \u2502 \u251c\u2500 docs/ # Folder containing documentation \u2502 \u251c\u2500 blabla.md # smFISH image (channel 1) \u2502 \u251c\u2500 assets/ # Folder containing images of docs \u2502 \u2502 \u251c\u2500 screenshot.png # Screenshot of plugin \u2502 \u251c\u2500 imjoy-plugins/ # Folder containing ImJoy plugins \u2502 \u251c\u2500 plugin1.imjoy.html # ImJoy plugin 1 \u2502 \u251c\u2500 plugin2.imjoy.html # ImJoy plugin 2 \u2502 \u251c\u2500 site/ # Folder web-site of documentation (auto created) \u2502 \u251c\u2500 ... \u2502 \u251c\u2500 .gitignore # File specifying files and folders that are ignored by git \u251c\u2500 LICENCE # Licence file \u251c\u2500 mkdocs.yaml # File defining how documentation is created \u251c\u2500 ReadMe.md # ReadMe file rendered on GitHub \u251c\u2500 setup.py # File containing .... .","title":"1. Code organization"},{"location":"code-organization/#code-organization","text":"To get started, we created the project folder called ImJoy-demo-project Below we show how this folder was populated during the development described in this tutorial. It contains files and folders for GitHub, the documentation, and the actual Python and ImJoy code. This might look daunting at the beginning, but we will explain in detail all steps that eventually results in this organization. . \u251c\u2500 dev/ # Folder containing code for development \u2502 \u251c\u2500 dev-calc-sine..ipynb # Jupyter notebook \u2502 \u251c\u2500 docs/ # Folder containing documentation \u2502 \u251c\u2500 blabla.md # smFISH image (channel 1) \u2502 \u251c\u2500 assets/ # Folder containing images of docs \u2502 \u2502 \u251c\u2500 screenshot.png # Screenshot of plugin \u2502 \u251c\u2500 imjoy-plugins/ # Folder containing ImJoy plugins \u2502 \u251c\u2500 plugin1.imjoy.html # ImJoy plugin 1 \u2502 \u251c\u2500 plugin2.imjoy.html # ImJoy plugin 2 \u2502 \u251c\u2500 site/ # Folder web-site of documentation (auto created) \u2502 \u251c\u2500 ... \u2502 \u251c\u2500 .gitignore # File specifying files and folders that are ignored by git \u251c\u2500 LICENCE # Licence file \u251c\u2500 mkdocs.yaml # File defining how documentation is created \u251c\u2500 ReadMe.md # ReadMe file rendered on GitHub \u251c\u2500 setup.py # File containing .... .","title":"Code organization"},{"location":"deployment/","text":"Deployment and stable release The last step is the deployment and creating a stable release. Here we explain how you can package your module in a way that ImJoy can install it as a requirment via the pip command Create a pip package In order to create a package that can be installed via the pip command, you have to specify a setup.py file. This is a simple python file in the root folder that specifies our package. from setuptools import setup , find_packages requirements = [ 'numpy' ] setup ( name = 'pkgcode' , version = '0.1.0' , description = 'What is going on.' , url = 'http://whatever' , author = 'Florian MUELLER' , author_email = 'muellerf.research@gmail.com' , license = 'MIT' , packages = find_packages (), include_package_data = True , install_requires = requirements , zip_safe = False ) The important fields to adjust for your own package are requirements : contains all requirements of your package name : this has to be the name of the folder actually containing your modules. This is not necessarily the name of your package. version : version of your package. You can specify what you want, usually semantic versioning is recommended. [TODO: add link] description , url , author , author_email : self-explanatory fields. licence : licence type of your repository. If you are not sure which license you should use , check out choosealicense.com . [TODO: add link for more infos] [TODO: how to test this?] Once your package works, you can push it to GitHub. Specify pip package Now you can specify this package as a requirement in your plugin. ImJoy will the automatically download this package. We specify this in the requirements of the plugin. [TODO add string] One very important aspect is the tag specified here @ . This allows to install the specified version, giving you precise control about what is installed. In the actual plugin, we now have to consider this stable version by adding `` ` python if 'dev-local' in api . TAG : import importlib sys . path . insert ( 0 , 'PathToModule' ) import rnaloc importlib . reload ( rnaloc ) else : import rnaloc More information can be found here.","title":"6. Deployment"},{"location":"deployment/#deployment-and-stable-release","text":"The last step is the deployment and creating a stable release. Here we explain how you can package your module in a way that ImJoy can install it as a requirment via the pip command","title":"Deployment and stable release"},{"location":"deployment/#create-a-pip-package","text":"In order to create a package that can be installed via the pip command, you have to specify a setup.py file. This is a simple python file in the root folder that specifies our package. from setuptools import setup , find_packages requirements = [ 'numpy' ] setup ( name = 'pkgcode' , version = '0.1.0' , description = 'What is going on.' , url = 'http://whatever' , author = 'Florian MUELLER' , author_email = 'muellerf.research@gmail.com' , license = 'MIT' , packages = find_packages (), include_package_data = True , install_requires = requirements , zip_safe = False ) The important fields to adjust for your own package are requirements : contains all requirements of your package name : this has to be the name of the folder actually containing your modules. This is not necessarily the name of your package. version : version of your package. You can specify what you want, usually semantic versioning is recommended. [TODO: add link] description , url , author , author_email : self-explanatory fields. licence : licence type of your repository. If you are not sure which license you should use , check out choosealicense.com . [TODO: add link for more infos] [TODO: how to test this?] Once your package works, you can push it to GitHub.","title":"Create a pip package"},{"location":"deployment/#specify-pip-package","text":"Now you can specify this package as a requirement in your plugin. ImJoy will the automatically download this package. We specify this in the requirements of the plugin. [TODO add string] One very important aspect is the tag specified here @ . This allows to install the specified version, giving you precise control about what is installed. In the actual plugin, we now have to consider this stable version by adding `` ` python if 'dev-local' in api . TAG : import importlib sys . path . insert ( 0 , 'PathToModule' ) import rnaloc importlib . reload ( rnaloc ) else : import rnaloc More information can be found here.","title":"Specify pip package"},{"location":"distribution/","text":"Distribution The recommended way to distribute ImJoy plugins is with a specific url here you can either use directly the plugin url. or you can add a manifest file, that allows ImJoy to treat your repository as a plugin repository. The advantage is that you can use a shorter syntax.","title":"7. Distribution"},{"location":"distribution/#distribution","text":"The recommended way to distribute ImJoy plugins is with a specific url here you can either use directly the plugin url. or you can add a manifest file, that allows ImJoy to treat your repository as a plugin repository. The advantage is that you can use a shorter syntax.","title":"Distribution"},{"location":"documentation/","text":"Documentation User manual are invaluable for the user to be able to correctly use the code. A widely used format to write such documentations is Markdown. This is a simple language for highlighting. As an example, see the Markdown file of this page . For a introduction to Markdown see here . Documentation can be as simple as a ReadMe.md in the root directory that will be rendered on the GitHub repository page. You can also create more advanced documentations. Here many excellent tools exist. An easy tool to get started is MkDocs . This documentation is generated with MkDocs Installing MkDocs If you already have Anaconda, it is easy to get started. First, you have to install MkDocs. Open a Anaconda terminal and type pip install mkdocs We used a special theme Material for mkdocs , which can be installed with: pip install mkdocs-material Writing a documentation To initialize the documentation, go to folder containing the project folder ( ImJoy-demo-project in our case). Open an Anaconda terminal and run mkdocs new ImJoy-demo-project This will then create two files: Configuration file: ImJoy-demo-project\\mkdocs.yml Initialize the docs: ImJoy-demo-project\\docs\\index.md With these two files, a first version of the documentation can already be generated. MkDocs provides a developmental server that you can use to check on your computer how the documentation web site will look like. For this, open an Anaconda terminal in your project folder and run mkdocs serve The website will then be available at http://127.0.0.1:8000 . The mkdocs.yml file determines how your documentation is organized and looks like. We invite you to consult the excellent documentations of MkDocs and [Material for mkdocs](https://squidfunk.github.io/mkdocs-material/ for more details. Deploying your documentation Once the documentation is finished, you can build the website with mkdocs build This will build the static website containing the documentation, which is stored in the newly created subfolder site . You can then automatically deploy this site to GitHub pages. mkdocs gh-deploy --clean --force This will create a separate branch gh-pages on your GitHub repository dedicated to the documentation. GitHub will then automatically build the website with the documentation for you. To obtain the URL, go the Settings and GitHub Pages . The URL for this website is https://muellerflorian.github.io/ImJoy-demo-project/ Please note that each time you update the documentation , you have to perform these steps to build and deploy your documentation.","title":"5. Documentation"},{"location":"documentation/#documentation","text":"User manual are invaluable for the user to be able to correctly use the code. A widely used format to write such documentations is Markdown. This is a simple language for highlighting. As an example, see the Markdown file of this page . For a introduction to Markdown see here . Documentation can be as simple as a ReadMe.md in the root directory that will be rendered on the GitHub repository page. You can also create more advanced documentations. Here many excellent tools exist. An easy tool to get started is MkDocs . This documentation is generated with MkDocs","title":"Documentation"},{"location":"documentation/#installing-mkdocs","text":"If you already have Anaconda, it is easy to get started. First, you have to install MkDocs. Open a Anaconda terminal and type pip install mkdocs We used a special theme Material for mkdocs , which can be installed with: pip install mkdocs-material","title":"Installing MkDocs"},{"location":"documentation/#writing-a-documentation","text":"To initialize the documentation, go to folder containing the project folder ( ImJoy-demo-project in our case). Open an Anaconda terminal and run mkdocs new ImJoy-demo-project This will then create two files: Configuration file: ImJoy-demo-project\\mkdocs.yml Initialize the docs: ImJoy-demo-project\\docs\\index.md With these two files, a first version of the documentation can already be generated. MkDocs provides a developmental server that you can use to check on your computer how the documentation web site will look like. For this, open an Anaconda terminal in your project folder and run mkdocs serve The website will then be available at http://127.0.0.1:8000 . The mkdocs.yml file determines how your documentation is organized and looks like. We invite you to consult the excellent documentations of MkDocs and [Material for mkdocs](https://squidfunk.github.io/mkdocs-material/ for more details.","title":"Writing a documentation"},{"location":"documentation/#deploying-your-documentation","text":"Once the documentation is finished, you can build the website with mkdocs build This will build the static website containing the documentation, which is stored in the newly created subfolder site . You can then automatically deploy this site to GitHub pages. mkdocs gh-deploy --clean --force This will create a separate branch gh-pages on your GitHub repository dedicated to the documentation. GitHub will then automatically build the website with the documentation for you. To obtain the URL, go the Settings and GitHub Pages . The URL for this website is https://muellerflorian.github.io/ImJoy-demo-project/ Please note that each time you update the documentation , you have to perform these steps to build and deploy your documentation.","title":"Deploying your documentation"},{"location":"github/","text":"Deployment on GitHub It is good practice to deploy your code on GitHub. This provides backup and version control. GitHub repositories can be either publich or private. So even closed developments are possible. If you don't have an account, create one and follow the provided instructions for how to create a repository. Several execellent ressources exist explaining how to use GitHub. Below is a screen shot of this repository: Visit GitHub repository here >>","title":"2. GitHub"},{"location":"github/#deployment-on-github","text":"It is good practice to deploy your code on GitHub. This provides backup and version control. GitHub repositories can be either publich or private. So even closed developments are possible. If you don't have an account, create one and follow the provided instructions for how to create a repository. Several execellent ressources exist explaining how to use GitHub. Below is a screen shot of this repository: Visit GitHub repository here >>","title":"Deployment on GitHub"},{"location":"imjoy-development/","text":"ImJoy plugin development You can then start working on your ImJoy plugin and choose the appropriate plugin type. For this simple tutorial, we use a native python plugin. Tag for development A very useful features are tags to change how a plugin is executed. Here we use tags to differentiate between a development and stable release version. Importantly, once you plugin is done, you can specify which version should be installed. in the block, we have this definitions \"tags\" : [ \"stable\" , \"dev-local\" , \"dev-github\" ] Using own module During development, we will use our locally stored module. This can be done in the <script> block. Here we have to add the absolute path of the module PathToModule to the Python system path. if 'dev-local' in api . TAG : import importlib sys . path . insert ( 0 , 'PathToModule' ) import outils importlib . reload ( outils ) Please note the importlib.reload allows to reload the library if you have changes. we can then use the module outils . calc_sine ( 50 ) User Interaction For our example, the user has to specify how many data-points should be calculated. The easiest way to obtain user input is by using the plugin user interface. This can be done with the ui string the the <config block. \"ui\" : [ \"# of data points : {id:'n_points', type: 'number', min: 0, placeholder:20}\" ] For more infos, see [here](https://imjoy.io/docs/#/development?id=ui]. For more advanced interfaces, you can use a window plugin that allows you to design an interface with HTML. We more information we refer to a dedicated demo Saving plugin You can then download the plugin code from the editor. This will download a file name with the name of the plugin, followed by a unique string, and the extension .imjoy.html . We save it without the unique string in the folder imjoy-plugin","title":"4. ImJoy development"},{"location":"imjoy-development/#imjoy-plugin-development","text":"You can then start working on your ImJoy plugin and choose the appropriate plugin type. For this simple tutorial, we use a native python plugin.","title":"ImJoy plugin development"},{"location":"imjoy-development/#tag-for-development","text":"A very useful features are tags to change how a plugin is executed. Here we use tags to differentiate between a development and stable release version. Importantly, once you plugin is done, you can specify which version should be installed. in the block, we have this definitions \"tags\" : [ \"stable\" , \"dev-local\" , \"dev-github\" ]","title":"Tag for development"},{"location":"imjoy-development/#using-own-module","text":"During development, we will use our locally stored module. This can be done in the <script> block. Here we have to add the absolute path of the module PathToModule to the Python system path. if 'dev-local' in api . TAG : import importlib sys . path . insert ( 0 , 'PathToModule' ) import outils importlib . reload ( outils ) Please note the importlib.reload allows to reload the library if you have changes. we can then use the module outils . calc_sine ( 50 )","title":"Using own module"},{"location":"imjoy-development/#user-interaction","text":"For our example, the user has to specify how many data-points should be calculated. The easiest way to obtain user input is by using the plugin user interface. This can be done with the ui string the the <config block. \"ui\" : [ \"# of data points : {id:'n_points', type: 'number', min: 0, placeholder:20}\" ] For more infos, see [here](https://imjoy.io/docs/#/development?id=ui]. For more advanced interfaces, you can use a window plugin that allows you to design an interface with HTML. We more information we refer to a dedicated demo","title":"User Interaction"},{"location":"imjoy-development/#saving-plugin","text":"You can then download the plugin code from the editor. This will download a file name with the name of the plugin, followed by a unique string, and the extension .imjoy.html . We save it without the unique string in the folder imjoy-plugin","title":"Saving plugin"},{"location":"python-development/","text":"Python code development Here we only provide a brief overview of how Python code could be developed. We use these explanation to establish the necessary terminology for the following steps in this tutorial. Many dedicated resources exist on the web for each of these aspects, and we invite the reader to consult these for more detailed information. Development environment The actual Python code performing the calculation can be implemented, tested, and continued to be used outside of ImJoy. A simple way to get started in Python is using Anaconda . This open source distribution comes with many Python packages pre-installed. Further it already contains the development environments Spyder and Jupyter Notebook . Here, we use Anaconda (Python 3.6) and Jupyter Notebook . In such a notebook, you can implement and test your Python code. To store these notebooks, we create a subfolder dev in the project folder ImJoy-demo-project . The notebook dev-calc-sine.ipynb contains the developed code. Full file is here >> Package code as Python module Once your code is working, you can package it as a module. Python modules are .py files that consist of Python code. They can contain definitions of functions, classes, and variables that can then be utilized in other Python programs. Wrap code in functions One thing to keep in mind, is that typically the input of these functions is generated in your actual ImJoy plugin. For instance, we will ask the user to specify the number of data-points that should be calculated. Make module We will wrap the above code in a function as shown below. # Define a function def calc_sine ( n_points = 10 ): x = np . around ( np . arange ( 0.0 , 5.0 , 5.0 / n_points ), decimals = 2 ) y = np . sin ( 2 * np . pi * x ) return x , y This function is then saved in a .py file. It is good practice to comment your code, e.g. following the guidelines of Google . We named this file outils.py and saved in a subfolder pkgcode . Full file is here >> In order to be able to import this module, we have to update the Python sys path. Assuming the we open the Jupyter notebook, we can do this with a relavtive path, but an absolute path will work as well. import sys sys . path . insert ( 0 , '../pkgcode' ) We can then import and call the function # Import outils module import outils # Call function outils . calc_sine ( 50 )","title":"3. Python development"},{"location":"python-development/#python-code-development","text":"Here we only provide a brief overview of how Python code could be developed. We use these explanation to establish the necessary terminology for the following steps in this tutorial. Many dedicated resources exist on the web for each of these aspects, and we invite the reader to consult these for more detailed information.","title":"Python code development"},{"location":"python-development/#development-environment","text":"The actual Python code performing the calculation can be implemented, tested, and continued to be used outside of ImJoy. A simple way to get started in Python is using Anaconda . This open source distribution comes with many Python packages pre-installed. Further it already contains the development environments Spyder and Jupyter Notebook . Here, we use Anaconda (Python 3.6) and Jupyter Notebook . In such a notebook, you can implement and test your Python code. To store these notebooks, we create a subfolder dev in the project folder ImJoy-demo-project . The notebook dev-calc-sine.ipynb contains the developed code. Full file is here >>","title":"Development environment"},{"location":"python-development/#package-code-as-python-module","text":"Once your code is working, you can package it as a module. Python modules are .py files that consist of Python code. They can contain definitions of functions, classes, and variables that can then be utilized in other Python programs.","title":"Package code as Python module"},{"location":"python-development/#wrap-code-in-functions","text":"One thing to keep in mind, is that typically the input of these functions is generated in your actual ImJoy plugin. For instance, we will ask the user to specify the number of data-points that should be calculated.","title":"Wrap code in functions"},{"location":"python-development/#make-module","text":"We will wrap the above code in a function as shown below. # Define a function def calc_sine ( n_points = 10 ): x = np . around ( np . arange ( 0.0 , 5.0 , 5.0 / n_points ), decimals = 2 ) y = np . sin ( 2 * np . pi * x ) return x , y This function is then saved in a .py file. It is good practice to comment your code, e.g. following the guidelines of Google . We named this file outils.py and saved in a subfolder pkgcode . Full file is here >> In order to be able to import this module, we have to update the Python sys path. Assuming the we open the Jupyter notebook, we can do this with a relavtive path, but an absolute path will work as well. import sys sys . path . insert ( 0 , '../pkgcode' ) We can then import and call the function # Import outils module import outils # Call function outils . calc_sine ( 50 )","title":"Make module"}]}