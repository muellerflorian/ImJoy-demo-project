{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Here we describe the different steps when developing a Python plugin for ImJoy. We will implement a ImJoy plugin that uses the Python plugin engine to perform some calcutions (Calculate a sine function with a user defined number of data-points). The results will then we plotted in the ImJoy interface. The code is hosted on GitHub, the plugin is explained in a dedicated documenation, and the plugin code will be distributed with a dedicated ImJoy link. This allows easy installation for the end user. Disclaimer 1 : a number of different tools exist for the different steps presented here. We focus on the ones that are widely used and easily accesible. Disclaimer 2 : the implemented computational task is intentionally kept very simply to allow focusing on the actual workflow and the different elements.","title":"Overview"},{"location":"#overview","text":"Here we describe the different steps when developing a Python plugin for ImJoy. We will implement a ImJoy plugin that uses the Python plugin engine to perform some calcutions (Calculate a sine function with a user defined number of data-points). The results will then we plotted in the ImJoy interface. The code is hosted on GitHub, the plugin is explained in a dedicated documenation, and the plugin code will be distributed with a dedicated ImJoy link. This allows easy installation for the end user. Disclaimer 1 : a number of different tools exist for the different steps presented here. We focus on the ones that are widely used and easily accesible. Disclaimer 2 : the implemented computational task is intentionally kept very simply to allow focusing on the actual workflow and the different elements.","title":"Overview"},{"location":"code-organization/","text":"Code organization The code of this project will be hosted on GitHub. The different steps described in this tutorial will eventually results in this organization. . \u251c\u2500 dev/ # Folder containing code for development \u2502 \u251c\u2500 blabla.md # Jupyter notebook \u251c\u2500 docs/ # Folder containing documentation \u2502 \u251c\u2500 blabla.md # smFISH image (channel 1) \u2502 \u251c\u2500 assets/ # Folder containing images of docs \u2502 \u2502 \u251c\u2500 screenshot.png # Screenshot of plugin \u251c\u2500 imjoy-plugins/ # Folder containing ImJoy plugins \u2502 \u251c\u2500 plugin1.imjoy.html # ImJoy plugin 1 \u2502 \u251c\u2500 plugin2.imjoy.html # ImJoy plugin 2 \u251c\u2500 imjoy-plugins/ # Folder web-site of documentation (auto created) \u251c\u2500 mkdocs.yaml # File defining how documentation is created \u251c\u2500 setup.py # File containing .... .","title":"Code organization"},{"location":"code-organization/#code-organization","text":"The code of this project will be hosted on GitHub. The different steps described in this tutorial will eventually results in this organization. . \u251c\u2500 dev/ # Folder containing code for development \u2502 \u251c\u2500 blabla.md # Jupyter notebook \u251c\u2500 docs/ # Folder containing documentation \u2502 \u251c\u2500 blabla.md # smFISH image (channel 1) \u2502 \u251c\u2500 assets/ # Folder containing images of docs \u2502 \u2502 \u251c\u2500 screenshot.png # Screenshot of plugin \u251c\u2500 imjoy-plugins/ # Folder containing ImJoy plugins \u2502 \u251c\u2500 plugin1.imjoy.html # ImJoy plugin 1 \u2502 \u251c\u2500 plugin2.imjoy.html # ImJoy plugin 2 \u251c\u2500 imjoy-plugins/ # Folder web-site of documentation (auto created) \u251c\u2500 mkdocs.yaml # File defining how documentation is created \u251c\u2500 setup.py # File containing .... .","title":"Code organization"},{"location":"deployment/","text":"Deployment and stable release The last step is the deployment and creating a stable release. Create a pip package In order to create a package that can be installed via the pip command, you have to specify a setup.py file. This is a simple python file in the root folder that specifies our package. ```python from setuptools import setup, find_packages requirements = ['numpy'] setup( name='pkgcode', version='0.1.0', description='What is going on.', url='http://whatever', author='Florian MUELLER', author_email='muellerf.research@gmail.com', license='MIT', packages=find_packages(), include_package_data=True, install_requires=requirements, zip_safe=False) ``` The important fields to adjust for your own package are requirements : contains all requirements of your package name : this has to be the name of the folder actually containing your modules. This is not necessarily the name of your package. version : version of your package. You can specify what you want, usually semantic versioning is recommended. [TODO: add link] description , url , author , author_email : self-explanatory fields. licence : licence type of your repository. [TODO: add link] [TODO: add link for more infos] [TODO: how to test this?] Once your package works, you can push it to GitHub. Specify pip package Now you can specify this package as a requirement in your plugin. ImJoy will the automatically download this package. We specify this in the requirements of the plugin. [TODO add string] One very important aspect is the tag specified here @ . This allows to install the specified version, giving you precise control about what is installed. In the actual plugin, we now have to consider this stable version by adding ```python if 'dev-local' in api.TAG: import importlib sys.path.insert(0, 'PathToModule') import rnaloc importlib.reload(rnaloc) else: import rnaloc More informations can be found here.","title":"Deployment"},{"location":"deployment/#deployment-and-stable-release","text":"The last step is the deployment and creating a stable release.","title":"Deployment and stable release"},{"location":"deployment/#create-a-pip-package","text":"In order to create a package that can be installed via the pip command, you have to specify a setup.py file. This is a simple python file in the root folder that specifies our package. ```python from setuptools import setup, find_packages requirements = ['numpy'] setup( name='pkgcode', version='0.1.0', description='What is going on.', url='http://whatever', author='Florian MUELLER', author_email='muellerf.research@gmail.com', license='MIT', packages=find_packages(), include_package_data=True, install_requires=requirements, zip_safe=False) ``` The important fields to adjust for your own package are requirements : contains all requirements of your package name : this has to be the name of the folder actually containing your modules. This is not necessarily the name of your package. version : version of your package. You can specify what you want, usually semantic versioning is recommended. [TODO: add link] description , url , author , author_email : self-explanatory fields. licence : licence type of your repository. [TODO: add link] [TODO: add link for more infos] [TODO: how to test this?] Once your package works, you can push it to GitHub.","title":"Create a pip package"},{"location":"deployment/#specify-pip-package","text":"Now you can specify this package as a requirement in your plugin. ImJoy will the automatically download this package. We specify this in the requirements of the plugin. [TODO add string] One very important aspect is the tag specified here @ . This allows to install the specified version, giving you precise control about what is installed. In the actual plugin, we now have to consider this stable version by adding ```python if 'dev-local' in api.TAG: import importlib sys.path.insert(0, 'PathToModule') import rnaloc importlib.reload(rnaloc) else: import rnaloc More informations can be found here.","title":"Specify pip package"},{"location":"distribution/","text":"Distribution","title":"Distribution"},{"location":"distribution/#distribution","text":"","title":"Distribution"},{"location":"documentation/","text":"Documentation user manual are invaluable for the user to be able to correctly use the code, Widely used format is markdown. This is a simple language for highlighting. This document is written in markdown, for raw file see this link For a introduction to markdown see here . Documentation can be a simple ReadMe.md in the root directory that will be rendered on the GitHub repository page. You can also create more advanced documentations. Here many excellent tools exist. An easy tool to get started is MkDocs . This documentation is generated with mkdocs Installing mkdocs If you already have Anaconda, it is easy to get started. First, you have to install mkdocs. Open a Anaconda terminal and types pip install mkdocs We used a special theme: Material for mkdocs pip install mkdocs-material Writing a documentation To initialize the documentation, go to folder containing the project folder ( ImJoy-demo-project in our case). Open an Anaconda terminal and run mkdocs new ImJoy-demo-project This will then create two files: Configuration file: ImJoy-demo-project\\mkdocs.yml Initialize the docs: ImJoy-demo-project\\docs\\index.md With these two files, a first version of the documentation can already be generated. MkDOcs provides a developmental server that you can use to check on your computer how the documentation web site will look like. For this, open an Anaconda terminal in your project folder and run mkdocs serve The website will then be available at http://127.0.0.1:8000 . Deploying your documentation Once the documention is finished, you can build the website with mkdocs build You can then deploy this site to GitHub pages. mkdocs gh-deploy --clean --force` This will create a separate branch on your GitHub repository dedicated to the documentation. In order to use it, you can ....","title":"Documentation"},{"location":"documentation/#documentation","text":"user manual are invaluable for the user to be able to correctly use the code, Widely used format is markdown. This is a simple language for highlighting. This document is written in markdown, for raw file see this link For a introduction to markdown see here . Documentation can be a simple ReadMe.md in the root directory that will be rendered on the GitHub repository page. You can also create more advanced documentations. Here many excellent tools exist. An easy tool to get started is MkDocs . This documentation is generated with mkdocs","title":"Documentation"},{"location":"documentation/#installing-mkdocs","text":"If you already have Anaconda, it is easy to get started. First, you have to install mkdocs. Open a Anaconda terminal and types pip install mkdocs We used a special theme: Material for mkdocs pip install mkdocs-material","title":"Installing mkdocs"},{"location":"documentation/#writing-a-documentation","text":"To initialize the documentation, go to folder containing the project folder ( ImJoy-demo-project in our case). Open an Anaconda terminal and run mkdocs new ImJoy-demo-project This will then create two files: Configuration file: ImJoy-demo-project\\mkdocs.yml Initialize the docs: ImJoy-demo-project\\docs\\index.md With these two files, a first version of the documentation can already be generated. MkDOcs provides a developmental server that you can use to check on your computer how the documentation web site will look like. For this, open an Anaconda terminal in your project folder and run mkdocs serve The website will then be available at http://127.0.0.1:8000 .","title":"Writing a documentation"},{"location":"documentation/#deploying-your-documentation","text":"Once the documention is finished, you can build the website with mkdocs build You can then deploy this site to GitHub pages. mkdocs gh-deploy --clean --force` This will create a separate branch on your GitHub repository dedicated to the documentation. In order to use it, you can ....","title":"Deploying your documentation"},{"location":"github/","text":"Deployment on GitHub It is good practice to deploy your code on GitHub. This provides backup and version control. GitHub repositories can be either publich or private. So even closed developments are possible. If you don't have an account, create one and follow the provided instructions for how to create a repository. Several execellent ressources exist explaining how to use GitHub.","title":"GitHub"},{"location":"github/#deployment-on-github","text":"It is good practice to deploy your code on GitHub. This provides backup and version control. GitHub repositories can be either publich or private. So even closed developments are possible. If you don't have an account, create one and follow the provided instructions for how to create a repository. Several execellent ressources exist explaining how to use GitHub.","title":"Deployment on GitHub"},{"location":"imjoy-development/","text":"ImJoy plugin development You can then make an ImJoy plugin and choose the appropriate plugin type. Tag for development A very useful features are tags to change how a plugin is executed. Here we use tags to differentiate between a development and stable release version. Importantly, once you plugin is done, you can specify which version should be installed. in the block, we have this definitions \"tags\": [\"stable\",\"dev-local\",\"dev-github\"] Using own module During development, we will use our locally stored code. This can be done in the <script> block if 'dev-local' in api.TAG: import importlib sys.path.insert(0, 'PathToModule') import rnaloc importlib.reload(rnaloc) Please note the importlib.reload allows to reload the library if you have changes. User Interaction For our example, the user has to specify how many data-points should be calculated. The easiest way to obtain user input is by using the plugin user interface. [TODO plugin string] For more advanced interfaces, you can use a window plugin that allows you to design an interface with HTML. We more information we refer to a dedicated demo Saving plugin You can then download the plugin code from the editor. This will download a file name with the name of the plugin, followed by a unique string, and the extension .imjoy.html . We save it without the unique string in the folder imjoy-plugin","title":"ImJoy development"},{"location":"imjoy-development/#imjoy-plugin-development","text":"You can then make an ImJoy plugin and choose the appropriate plugin type.","title":"ImJoy plugin development"},{"location":"imjoy-development/#tag-for-development","text":"A very useful features are tags to change how a plugin is executed. Here we use tags to differentiate between a development and stable release version. Importantly, once you plugin is done, you can specify which version should be installed. in the block, we have this definitions \"tags\": [\"stable\",\"dev-local\",\"dev-github\"]","title":"Tag for development"},{"location":"imjoy-development/#using-own-module","text":"During development, we will use our locally stored code. This can be done in the <script> block if 'dev-local' in api.TAG: import importlib sys.path.insert(0, 'PathToModule') import rnaloc importlib.reload(rnaloc) Please note the importlib.reload allows to reload the library if you have changes.","title":"Using own module"},{"location":"imjoy-development/#user-interaction","text":"For our example, the user has to specify how many data-points should be calculated. The easiest way to obtain user input is by using the plugin user interface. [TODO plugin string] For more advanced interfaces, you can use a window plugin that allows you to design an interface with HTML. We more information we refer to a dedicated demo","title":"User Interaction"},{"location":"imjoy-development/#saving-plugin","text":"You can then download the plugin code from the editor. This will download a file name with the name of the plugin, followed by a unique string, and the extension .imjoy.html . We save it without the unique string in the folder imjoy-plugin","title":"Saving plugin"},{"location":"index2/","text":"ImJoy plugin development Overview Here we describe the different steps when developing a Python plugin for ImJoy. We will implement a ImJoy plugin that uses the Python plugin engine to perform some calcutions (Calculate a sine function with a user defined number of data-points). The results will then we plotted in the ImJoy interface. The code is hosted on GitHub, the plugin is explained in a dedicated documenation, and the plugin code will be distributed with a dedicated ImJoy link. This allows easy installation for the end user. Disclaimer 1 : a number of different tools exist for the different steps presented here. We focus on the ones that are widely used and easily accesible. Disclaimer 2 : the implemented computational task is intentionally kept very simply to allow focusing on the actual workflow and the different elements. ImJoy plugin development You can then make an ImJoy plugin and choose the appropriate plugin type. Tag for development A very useful features are tags to change how a plugin is executed. Here we use tags to differentiate between a development and stable release version. Importantly, once you plugin is done, you can specify which version should be installed. in the block, we have this definitions \"tags\": [\"stable\",\"dev-local\",\"dev-github\"] Using own module During development, we will use our locally stored code. This can be done in the <script> block if 'dev-local' in api.TAG: import importlib sys.path.insert(0, 'PathToModule') import rnaloc importlib.reload(rnaloc) Please note the importlib.reload allows to reload the library if you have changes. User Interaction For our example, the user has to specify how many data-points should be calculated. The easiest way to obtain user input is by using the plugin user interface. [TODO plugin string] For more advanced interfaces, you can use a window plugin that allows you to design an interface with HTML. We more information we refer to a dedicated demo Saving plugin You can then download the plugin code from the editor. This will download a file name with the name of the plugin, followed by a unique string, and the extension .imjoy.html . We save it without the unique string in the folder imjoy-plugin Deployment on GitHub It is good practice to deploy your code on GitHub. This provides backup and version control. GitHub repositories can be either publich or private. So even closed developments are possible. If you don't have an account, create one and follow the provided instructions for how to create a repository. Several execellent ressources exist explaining how to use GitHub. Documentation user manual are invaluable for the user to be able to correctly use the code, Widely used format is markdown. This is a simple language for highlighting. This document is written in markdown, for raw file see this link For a introduction to markdown see here . Documentation can be a simple ReadMe.md in the root directory that will be rendered on the GitHub page. You can also create more advanced documentations. Here many excellent tools exist. An easy tool to get started is MkDocs . This documentation is generated with mkdocs Installing mkdocs If you already have Anaconda, it is easy to get started. First, you have to install mkdocs. Open a Anaconda terminal and types pip install mkdocs We used a special theme: Material for mkdocs pip install mkdocs-material Writing a documentation To initialize the documentation, go to root folder and type in the anaconda terminal mkdocs new my-project This will then create [TODO] YOu can then specify this file to ,.... In order to test your changes live, you can start a development server from the root directory mkdocs serve Deploying your documentation Once the documention is finished, you can build the website with mkdocs build You can then deploy this site to GitHub pages. mkdocs gh-deploy --clean --force` This will create a separate branch on your GitHub repository dedicated to the documentation. In order to use it, you can .... Deployment The last step is the deployment and creating a stable release. Create a pip package In order to create a package that can be installed via the pip command, you have to specify a setup.py file. This is a simple python file in the root folder that specifies our package. ```python from setuptools import setup, find_packages requirements = ['numpy'] setup( name='pkgcode', version='0.1.0', description='What is going on.', url='http://whatever', author='Florian MUELLER', author_email='muellerf.research@gmail.com', license='MIT', packages=find_packages(), include_package_data=True, install_requires=requirements, zip_safe=False) ``` The important fields to adjust for your own package are requirements : contains all requirements of your package name : this has to be the name of the folder actually containing your modules. This is not necessarily the name of your package. version : version of your package. You can specify what you want, usually semantic versioning is recommended. [TODO: add link] description , url , author , author_email : self-explanatory fields. licence : licence type of your repository. [TODO: add link] [TODO: add link for more infos] [TODO: how to test this?] Once your package works, you can push it to GitHub. Specify pip package Now you can specify this package as a requirement in your plugin. ImJoy will the automatically download this package. We specify this in the requirements of the plugin. [TODO add string] One very important aspect is the tag specified here @ . This allows to install the specified version, giving you precise control about what is installed. In the actual plugin, we now have to consider this stable version by adding ```python if 'dev-local' in api.TAG: import importlib sys.path.insert(0, 'PathToModule') import rnaloc importlib.reload(rnaloc) else: import rnaloc More informations can be found here. Distribution","title":"ImJoy plugin development"},{"location":"index2/#imjoy-plugin-development","text":"","title":"ImJoy plugin development"},{"location":"index2/#overview","text":"Here we describe the different steps when developing a Python plugin for ImJoy. We will implement a ImJoy plugin that uses the Python plugin engine to perform some calcutions (Calculate a sine function with a user defined number of data-points). The results will then we plotted in the ImJoy interface. The code is hosted on GitHub, the plugin is explained in a dedicated documenation, and the plugin code will be distributed with a dedicated ImJoy link. This allows easy installation for the end user. Disclaimer 1 : a number of different tools exist for the different steps presented here. We focus on the ones that are widely used and easily accesible. Disclaimer 2 : the implemented computational task is intentionally kept very simply to allow focusing on the actual workflow and the different elements.","title":"Overview"},{"location":"index2/#imjoy-plugin-development_1","text":"You can then make an ImJoy plugin and choose the appropriate plugin type.","title":"ImJoy plugin development"},{"location":"index2/#tag-for-development","text":"A very useful features are tags to change how a plugin is executed. Here we use tags to differentiate between a development and stable release version. Importantly, once you plugin is done, you can specify which version should be installed. in the block, we have this definitions \"tags\": [\"stable\",\"dev-local\",\"dev-github\"]","title":"Tag for development"},{"location":"index2/#using-own-module","text":"During development, we will use our locally stored code. This can be done in the <script> block if 'dev-local' in api.TAG: import importlib sys.path.insert(0, 'PathToModule') import rnaloc importlib.reload(rnaloc) Please note the importlib.reload allows to reload the library if you have changes.","title":"Using own module"},{"location":"index2/#user-interaction","text":"For our example, the user has to specify how many data-points should be calculated. The easiest way to obtain user input is by using the plugin user interface. [TODO plugin string] For more advanced interfaces, you can use a window plugin that allows you to design an interface with HTML. We more information we refer to a dedicated demo","title":"User Interaction"},{"location":"index2/#saving-plugin","text":"You can then download the plugin code from the editor. This will download a file name with the name of the plugin, followed by a unique string, and the extension .imjoy.html . We save it without the unique string in the folder imjoy-plugin","title":"Saving plugin"},{"location":"index2/#deployment-on-github","text":"It is good practice to deploy your code on GitHub. This provides backup and version control. GitHub repositories can be either publich or private. So even closed developments are possible. If you don't have an account, create one and follow the provided instructions for how to create a repository. Several execellent ressources exist explaining how to use GitHub.","title":"Deployment on GitHub"},{"location":"index2/#documentation","text":"user manual are invaluable for the user to be able to correctly use the code, Widely used format is markdown. This is a simple language for highlighting. This document is written in markdown, for raw file see this link For a introduction to markdown see here . Documentation can be a simple ReadMe.md in the root directory that will be rendered on the GitHub page. You can also create more advanced documentations. Here many excellent tools exist. An easy tool to get started is MkDocs . This documentation is generated with mkdocs","title":"Documentation"},{"location":"index2/#installing-mkdocs","text":"If you already have Anaconda, it is easy to get started. First, you have to install mkdocs. Open a Anaconda terminal and types pip install mkdocs We used a special theme: Material for mkdocs pip install mkdocs-material","title":"Installing mkdocs"},{"location":"index2/#writing-a-documentation","text":"To initialize the documentation, go to root folder and type in the anaconda terminal mkdocs new my-project This will then create [TODO] YOu can then specify this file to ,.... In order to test your changes live, you can start a development server from the root directory mkdocs serve","title":"Writing a documentation"},{"location":"index2/#deploying-your-documentation","text":"Once the documention is finished, you can build the website with mkdocs build You can then deploy this site to GitHub pages. mkdocs gh-deploy --clean --force` This will create a separate branch on your GitHub repository dedicated to the documentation. In order to use it, you can ....","title":"Deploying your documentation"},{"location":"index2/#deployment","text":"The last step is the deployment and creating a stable release.","title":"Deployment"},{"location":"index2/#create-a-pip-package","text":"In order to create a package that can be installed via the pip command, you have to specify a setup.py file. This is a simple python file in the root folder that specifies our package. ```python from setuptools import setup, find_packages requirements = ['numpy'] setup( name='pkgcode', version='0.1.0', description='What is going on.', url='http://whatever', author='Florian MUELLER', author_email='muellerf.research@gmail.com', license='MIT', packages=find_packages(), include_package_data=True, install_requires=requirements, zip_safe=False) ``` The important fields to adjust for your own package are requirements : contains all requirements of your package name : this has to be the name of the folder actually containing your modules. This is not necessarily the name of your package. version : version of your package. You can specify what you want, usually semantic versioning is recommended. [TODO: add link] description , url , author , author_email : self-explanatory fields. licence : licence type of your repository. [TODO: add link] [TODO: add link for more infos] [TODO: how to test this?] Once your package works, you can push it to GitHub.","title":"Create a pip package"},{"location":"index2/#specify-pip-package","text":"Now you can specify this package as a requirement in your plugin. ImJoy will the automatically download this package. We specify this in the requirements of the plugin. [TODO add string] One very important aspect is the tag specified here @ . This allows to install the specified version, giving you precise control about what is installed. In the actual plugin, we now have to consider this stable version by adding ```python if 'dev-local' in api.TAG: import importlib sys.path.insert(0, 'PathToModule') import rnaloc importlib.reload(rnaloc) else: import rnaloc More informations can be found here.","title":"Specify pip package"},{"location":"index2/#distribution","text":"","title":"Distribution"},{"location":"licence/","text":"License MIT License Copyright \u00a9 Florian MUELLER Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence"},{"location":"licence/#license","text":"MIT License Copyright \u00a9 Florian MUELLER Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"python-development/","text":"Python code development Development environment The actual Python code performing the calculation can be implemented, tested, and continued to be used outside of ImJoy. A simple way to get started in Python is using Anaconda . This open source distrubtion comes with many Python packages pre-installed. Further it already contains the development enviornments Spyder and Jupyter Notebook . Here, we use Anaconda (Python 3.6) and Jupyter Notebook . In such a notebook, you can implement your python code. We created a folder with the name of the project, e.g. blablab . In this folder, we create a subfolder dev to save the Jupyter notebooks. Make notebook for calculations calculate sine function with a user defined number of data-points. Link it here Show screenshot? or code fragment. Package code as Python model Once your code is working, you can package it as a module. Python modules are .py files that consist of Python code. They can contain definitions of functions, classes, and variables that can then be utilized in other Python programs. Wrap code in functions One thing to keep in mind, is then typically the input of these functions is generated in your actual ImJoy plugin. For instance, we will ask the user to specify the number of data-points that should be calculated. Make module Essentially, we make a file TODO.py that contains the function definitions # Define a function def world(): print(\"Hello, World!\") This file is saved in the folder PathToModule . In order to use it, we have to this path. import sys sys.path.insert(0, 'PathToModule') # Import hello module import hello # Call function hello.world()","title":"Python development"},{"location":"python-development/#python-code-development","text":"","title":"Python code development"},{"location":"python-development/#development-environment","text":"The actual Python code performing the calculation can be implemented, tested, and continued to be used outside of ImJoy. A simple way to get started in Python is using Anaconda . This open source distrubtion comes with many Python packages pre-installed. Further it already contains the development enviornments Spyder and Jupyter Notebook . Here, we use Anaconda (Python 3.6) and Jupyter Notebook . In such a notebook, you can implement your python code. We created a folder with the name of the project, e.g. blablab . In this folder, we create a subfolder dev to save the Jupyter notebooks. Make notebook for calculations calculate sine function with a user defined number of data-points. Link it here Show screenshot? or code fragment.","title":"Development environment"},{"location":"python-development/#package-code-as-python-model","text":"Once your code is working, you can package it as a module. Python modules are .py files that consist of Python code. They can contain definitions of functions, classes, and variables that can then be utilized in other Python programs.","title":"Package code as Python model"},{"location":"python-development/#wrap-code-in-functions","text":"One thing to keep in mind, is then typically the input of these functions is generated in your actual ImJoy plugin. For instance, we will ask the user to specify the number of data-points that should be calculated.","title":"Wrap code in functions"},{"location":"python-development/#make-module","text":"Essentially, we make a file TODO.py that contains the function definitions # Define a function def world(): print(\"Hello, World!\") This file is saved in the folder PathToModule . In order to use it, we have to this path. import sys sys.path.insert(0, 'PathToModule') # Import hello module import hello # Call function hello.world()","title":"Make module"}]}